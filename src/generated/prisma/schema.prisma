// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String
  role             Role               @default(PATIENT)
  isAvailable      Boolean            @default(false)
  location         Location?
  requests         AmbulanceRequest[] @relation("PatientRequests")
  acceptedRequests AmbulanceRequest[] @relation("AcceptedDriver")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([role, isAvailable, email])
}

model Location {
  id        String @id @default(uuid())
  latitude  Float
  longitude Float
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])

  @@index([latitude, longitude])
}

model AmbulanceRequest {
  id             String        @id @default(uuid())
  patientId      String
  patient        User          @relation("PatientRequests", fields: [patientId], references: [id])
  status         RequestStatus @default(PENDING)
  latitude       Float
  longitude      Float
  rejectionCount Int           @default(0)
  acceptedById   String?
  acceptedBy     User?         @relation("AcceptedDriver", fields: [acceptedById], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([acceptedById, status])
}

enum Role {
  PATIENT
  DRIVER
  ADMIN
}

enum RequestStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
  ESCALATED
  TIMEOUT
}
